#!/usr/bin/env python3

import struct
import os
import sys
import asyncio
import json
import logging
# logging.basicConfig(filename='/tmp/native-host.log', level=logging.INFO)

_id = 1
stdout_queue = asyncio.Queue()
queues = {}

def parse_json_object(data):
    try:
        data = json.loads(data)
    except (UnicodeDecodeError, json.JSONDecodeError):
        logging.exception('failed to parse data: %r', data)
        return
    if not isinstance(data, dict):
        logging.error('expected a dict, got %s', type(data))
        return
    return data

async def write_to_stdout(stdout):
    while True:
        item = await stdout_queue.get()
        data = json.dumps(item).encode('utf8')
        stdout.write(struct.pack('I', len(data)))
        stdout.write(data)
        logging.info('sent request: %s', data)
        await stdout.drain()

async def read_from_stdin(stdin):
    while True:
        if not (length := await stdin.read(4)):
            break

        length, = struct.unpack('I', length)
        data = await stdin.readexactly(length)

        logging.info('got extension reply: %r', data)
        data = parse_json_object(data)
        if data is None:
            continue

        id = data.pop('_id', None)
        if queue := queues.get(id):
            await queue.put(data)
        else:
            logging.error('No queue for id %i', id)
    logging.info('stdin is closed')

async def write_to_socket(writer, queue, requests):
    done = False
    while not done or requests:
        item = await queue.get()
        if item is None:
            done = True

            try:
                # can't get the write end to trigger unless we send some data
                writer.write(b' ')
                await writer.drain()
            except ConnectionResetError:
                logging.info('connection closed')
                return

            continue
        logging.info('got reply: %r', item)
        if item.get('type') == 'complete':
            requests.remove(item.get('id'))
        writer.write(json.dumps(item).encode('utf8') + b'\n')
        await writer.drain()

async def read_from_socket(reader, id, queue, requests):
    try:
        while line := await reader.readline():
            logging.info('got request: %r', line)
            if (data := parse_json_object(line)) is not None:
                data['_id'] = id
                requests.add(data.get('id'))
                await stdout_queue.put(data)
    except ConnectionResetError:
        logging.info('connection closed')
    finally:
        await queue.put(None)

async def worker(reader, writer):
    global _id
    id = _id
    _id += 1
    logging.info('connected to client')

    queue = queues[id] = asyncio.Queue()
    requests = set()
    try:
        await asyncio.gather(
            read_from_socket(reader, id, queue, requests),
            write_to_socket(writer, queue, requests),
        )
    finally:
        logging.info('sending disconnect')
        await stdout_queue.put({'_id': id, 'type': 'disconnect'})
    queues.pop(id)
    writer.close()
    try:
        await writer.wait_closed()
    except (ConnectionResetError, BrokenPipeError):
        pass

async def main():
    loop = asyncio.get_event_loop()

    # find firefox profile dir
    dir = f'/proc/{os.getppid()}/fd/'
    profile_dir = None
    for fd in os.listdir(dir):
        dest = os.readlink(dir + fd)
        if dest.endswith('/places.sqlite'):
            profile_dir = os.path.dirname(dest)
            break

    transport, protocol = await loop.connect_write_pipe(asyncio.streams.FlowControlMixin, sys.stdout.buffer)
    stdout = asyncio.streams.StreamWriter(transport, protocol, None, loop)

    stdin = asyncio.StreamReader()
    protocol = asyncio.StreamReaderProtocol(stdin)
    await loop.connect_read_pipe(lambda: protocol, sys.stdin.buffer)

    server = await asyncio.start_unix_server(worker, profile_dir + '/qianli.sock')
    async with server:
        tasks = [server.serve_forever(), write_to_stdout(stdout)]
        tasks = [asyncio.create_task(t) for t in tasks]
        await read_from_stdin(stdin)
        for t in tasks:
            t.cancel()
        for t in tasks:
            try:
                await t
            except asyncio.CancelledError:
                pass

if __name__ == '__main__':
    asyncio.run(main())
