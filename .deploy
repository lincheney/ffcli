#!/usr/bin/env bash

set -eu -o pipefail

files=(
    background.mjs
    options.html
    options.mjs
    permissions.mjs
    manifest.json
    null
    shared.mjs
    api/index.mjs
    api/inTab.mjs
    api/fetch.mjs
    api/subscribe.mjs
)

log() { printf '%s\n' "$*" >&2; }
b64() {
    base64 -w0 | tr -d = | tr + - | tr / _
}

_curl() {
    if stdout="$(curl -L --fail-with-body --silent --show-error "$@")"; then
        echo "$stdout"
    else
        echo "$stdout" >&2
        return 1
    fi
}

addon_curl() {
    header="$(jq -nc '{alg: "HS256", typ: "JWT"}' | b64)" && \
    payload="$(jq -nc '{
        "iss": env.AMO_ISSUER,
        "jti": (now | tostring),
        "iat": now,
        "exp": (now + 60),
    }' | b64)" && \
    signature="$(<<<"$header.$payload" tr -d \\n | openssl dgst -binary -sha256 -hmac "$AMO_SECRET" | b64)" && \
    jwt="$header.$payload.$signature" && \
    _curl -H "Authorization: JWT $jwt" "$@"
}

github_curl() {
    _curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" "$@";
}

version="$(<manifest.json jq -re .version)"
addon_id="$(<manifest.json jq -re .browser_specific_settings.gecko.id)"
log "Got version $version"

if details="$(addon_curl "https://addons.mozilla.org/api/v5/addons/addon/$addon_id/versions/$version/")"; then
    log "Version $version already exists"

else
    log 'Creating zip file'
    zip -r -FS ffcli.zip "${files[@]}"

    log 'Uploading zip file'
    upload="$(addon_curl https://addons.mozilla.org/api/v5/addons/upload/ -XPOST -F upload=@ffcli.zip -F channel=unlisted | jq -re .uuid)"
    log 'Waiting for addon to be validated'
    while true; do
        details="$(addon_curl "https://addons.mozilla.org/api/v5/addons/upload/$upload/" -H 'Content-Type: application/json')"
        if <<<"$details" jq -re .processed >/dev/null; then
            if ! <<<"$details" jq -re .valid >/dev/null; then
                echo "addon invalid" >&2
                <<<"$details" jq -r '.validation.messages[] | [.type, .message] | @tsv' >&2
                exit 1
            fi
            break
        fi
        sleep 10
    done

    data="$(jq -nc --arg upload "$upload" '{upload: $upload}')"
    version="$(addon_curl "https://addons.mozilla.org/api/v5/addons/addon/$addon_id/versions/" -H 'Content-Type: application/json' -d "$data" | jq -re .version)"

    log 'Waiting for addon to be approved'
    while true; do
        details="$(addon_curl "https://addons.mozilla.org/api/v5/addons/addon/$addon_id/versions/$version/")"
        status="$(<<<"$details" jq -re .file.status)"
        if [[ "$status" == disabled ]]; then
            echo "review failed" >&2
            exit 1
        elif [[ "$status" == public ]]; then
            break
        fi
        sleep 10
    done

fi

url="$(<<<"$details" jq -re .file.url)"
log 'Downloading XPI'
filename="ffcli-$version.xpi"
addon_curl "$url" --output "$filename"

url="https://github.com/$GITHUB_REPO/releases/download/$version/$filename"
release_id="$( (
    if ! github_curl "https://api.github.com/repos/$GITHUB_REPO/releases/tags/$version"; then
        log 'Creating release'
        data="$(jq -ren --arg version "$version" --arg url "$url" '{
            tag_name: $version,
            target_commitish: env.GITHUB_SHA,
            name: $version,
            body: $url,
            generate_release_notes: true,
        }')"

        github_curl "https://api.github.com/repos/$GITHUB_REPO/releases" --data "$data"
    fi
) | jq -re .id)"

if ! (github_curl "https://api.github.com/repos/$GITHUB_REPO/releases/$release_id/assets" | jq -r .[].name | grep -Fxq "$filename"); then
    log 'Uploading XPI'
    github_curl "https://uploads.github.com/repos/$GITHUB_REPO/releases/$release_id/assets?name=$filename" \
        -H 'Content-type: application/octet-stream' \
        --data-binary "@$filename"
fi
